package xyz.sethy.cd.exercise;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.commons.io.IOUtils;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import net.minecraft.client.Minecraft;
import net.minecraftforge.client.MinecraftForgeClient;
import net.minecraftforge.common.MinecraftForge;

public class ExerciseLearner {
	// Creates a final variable, with the type of file, and the name filePath
	private final File filePath;
	// Creates a final variable, with the type of float, and the name easierPerBlockWalk
	private final float easierPerBlockWalk;
	// Creates a final variable, with the type of float, and the easierPerBlockPlaced
	private final float easierPerBlockPlaced;
	// Creates a final variable, with the type of float, and the name easierPerAttack
	private final float easierPerAttack;
	// Creates a final AtomicInteger, from Java's concurrent classes, with the name of blocksWalked
	private final AtomicInteger blocksWalked;
	// Creates a final AtomicInteger, from Java's concurrent classes, with the name of blocksPlaced
	private final AtomicInteger blocksPlaced;
	// Creates a final AtomicInteger, from Java's concurrent classes, with the name of timesAttacked
	private final AtomicInteger timesAttacked;
	
	public ExerciseLearner() {
		// Assigns the previous variables, with their new Objects created, prevents NPEs later on 
		this.filePath = new File("./cd/exercise.json");
		this.easierPerBlockWalk = 1.03f;
		this.easierPerBlockPlaced = 1.02f;
		this.easierPerAttack = 1.01f;
		this.blocksWalked = new AtomicInteger();
		this.blocksPlaced = new AtomicInteger();
		this.timesAttacked = new AtomicInteger();
		
		// Calls the load method below the class initializer method.
		load();
	}

	public void load() {
		// Creates a new File object, with the path of "./cd/" and if it doesn't exist it creates the directory, then returns
		File dir = new File("./cd/");
		if (!dir.exists()) {
			dir.mkdir();
			save();	
			return;
		}
		
		// A try with resource block, from Java7, trys to open a FileInputStream, with the filePath variable 
		try (FileInputStream inputStream = new FileInputStream(this.filePath)) {
			// Concatenates the inputStream bytes into a String
			String json = IOUtils.toString(inputStream);
			// Parses the string into a json object
			JsonObject object = new JsonParser().parse(json).getAsJsonObject();
			
			// Gets each property of the JsonObject; however, we assume they exist
			this.blocksWalked.set(object.get("blocksWalked").getAsInt());
			this.blocksPlaced.set(object.get("blocksPlaced").getAsInt());
			this.timesAttacked.set(object.get("timesAttacked").getAsInt());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void save() {
		JsonObject object = new JsonObject();
		object.addProperty("blocksWalked", this.blocksWalked.get());
		object.addProperty("blocksPlaced", this.blocksPlaced.get());
		object.addProperty("timesAttacked", this.timesAttacked.get());
		String json = object.getAsJsonObject().toString();
		Minecraft.getMinecraft().getLogAgent().logInfo(json);
		
		try (FileWriter writer = new FileWriter(this.filePath)) {
			writer.write(json);
			writer.flush();
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public float getBlockWalkToUseEnergy() {
		 return 1 - ((this.blocksWalked.get() / this.easierPerBlockWalk) / (this.blocksWalked.get()  + 1));
	}
	
	public float getBlockPlaceToUseEnergy() {
		 return 1 - ((this.blocksPlaced.get() / this.easierPerBlockPlaced) / (this.blocksPlaced.get()  + 1));
	}
	
	public float getAttackToUseEnergy() {
		 return 1 - ((this.timesAttacked.get() / this.easierPerBlockWalk) / (this.timesAttacked.get()  + 1));
	}
	
	public AtomicInteger getBlocksWalked() {
		return this.blocksWalked;
	}
	
	public AtomicInteger getBlockedPlaced() {
		return this.blocksPlaced;
	}
	
	public AtomicInteger getTimesAttacked() {
		return this.timesAttacked;
	}
}
