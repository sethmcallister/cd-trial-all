package xyz.sethy.cd.extended;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Level;

import cpw.mods.fml.common.network.PacketDispatcher;
import cpw.mods.fml.common.network.Player;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.EntityPlayerMP;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.packet.Packet250CustomPayload;
import net.minecraft.world.World;
import net.minecraftforge.common.IExtendedEntityProperties;
import xyz.sethy.cd.Main;

public class ExtendedPlayer implements IExtendedEntityProperties {
	public static final String EXT_PROP_NAME = "waterProp";
	private final EntityPlayer player;
	private float maxWaterLevel;
	private static final AtomicInteger WATER_WATCHER = new AtomicInteger(20);
	
	public ExtendedPlayer(final EntityPlayer player) {
		this.player = player;
		this.maxWaterLevel = 20f;
		
		player.registerExtendedProperties(EXT_PROP_NAME, this);
		
		this.player.getDataWatcher().addObject(WATER_WATCHER.get(), this.maxWaterLevel);
	}
	
	public static final ExtendedPlayer get(final EntityPlayer player) {
		return (ExtendedPlayer) player.getExtendedProperties(EXT_PROP_NAME);
	}

	@Override
	public void saveNBTData(NBTTagCompound compound) {
		NBTTagCompound properties = new NBTTagCompound();

		properties.setFloat("currentWaterLexel", this.player.getDataWatcher().getWatchableObjectFloat(WATER_WATCHER.get()));
		properties.setFloat("maxWaterLevel", this.maxWaterLevel);
		
		compound.setTag(EXT_PROP_NAME, properties);
	
	}

	@Override
	public void loadNBTData(NBTTagCompound compound) {
		NBTTagCompound properties = (NBTTagCompound) compound.getTag(EXT_PROP_NAME);

		this.player.getDataWatcher().updateObject(WATER_WATCHER.get(), properties.getFloat("currentWaterLevel"));
		this.maxWaterLevel = properties.getFloat("maxWaterLevel");
		
	}

	@Override
	public void init(Entity entity, World world) {}
	
	public boolean useWater(final float amount) {
		float water = this.player.getDataWatcher().getWatchableObjectFloat(WATER_WATCHER.get());
		boolean sufficient = amount <= water;
		water -= (amount < water ? amount : water);
		this.player.getDataWatcher().updateObject(WATER_WATCHER.getAndIncrement(), water);
		return sufficient;
	}
	
	public void replenishWater(final float amount) {
		this.player.getDataWatcher().updateObject(WATER_WATCHER.get(), this.maxWaterLevel);
	}
	
	public int getCurrentWaterLevel() {
		return this.player.getDataWatcher().getWatchableObjectInt(WATER_WATCHER.get());
	}
	
	public void setCurrentWaterLevel(float level) {
		this.player.getDataWatcher().updateObject(WATER_WATCHER.get(), (level < this.maxWaterLevel ? level : this.maxWaterLevel));
	}
	
	public float getMaxWaterLevel() {
		return this.maxWaterLevel;
	}
	
	public void setMaxWaterLevel(final float level) {
		this.maxWaterLevel = level;
	}
	
	public void sync() {
		if(player.worldObj.isRemote)
			return;
		
		EntityPlayerMP playerMP = (EntityPlayerMP) player;
		
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(4);
		DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
	
		try {
			dataOutputStream.writeFloat(this.maxWaterLevel);
		} catch (Exception e) {
			Main.LOGGER.log(Level.SEVERE, e.getMessage(), e.getCause());
		}
		
		Packet250CustomPayload packet = new Packet250CustomPayload("water", outputStream.toByteArray());
		PacketDispatcher.sendPacketToPlayer(packet, (Player)playerMP);
	}
}
